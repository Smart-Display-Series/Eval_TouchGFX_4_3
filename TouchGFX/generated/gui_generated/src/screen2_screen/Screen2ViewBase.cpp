/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen2ViewBase::Screen2ViewBase() :
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler),
    gaugeValueSetCallback(this, &Screen2ViewBase::gaugeValueSetCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));

    nextButton.setBitmaps(Bitmap(BITMAP_NEXT_BUTTON_RELEASED_ID), Bitmap(BITMAP_NEXT_BUTTON_PRESSED_ID));
    nextButton.setBitmapXY(0, 0);
    nextButton.setPosition(419, 211, 45, 45);
    nextButton.setAction(flexButtonCallback);

    gauge1.setBackground(touchgfx::Bitmap(BITMAP_GAUGE02_BACKGROUND_ID));
    gauge1.setPosition(130, 26, 220, 220);
    gauge1.setCenter(110, 110);
    gauge1.setStartEndAngle(-130, 130);
    gauge1.setRange(0, 100);
    gauge1.setValue(0);
    gauge1.setEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
    gauge1.setNeedle(BITMAP_GAUGE02_NEEDLE_ID, 13, 50);
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge1.setValueSetAction(gaugeValueSetCallback);

    icon.setXY(219, 198);
    icon.setBitmap(touchgfx::Bitmap(BITMAP_GAUGE02_ICON_LEVEL00_ID));

    readoutText.setPosition(210, 159, 60, 39);
    readoutText.setColor(touchgfx::Color::getColorFrom24BitRGB(33, 36, 50));
    readoutText.setLinespacing(0);
    Unicode::snprintf(readoutTextBuffer, READOUTTEXT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID2).getText());
    readoutText.setWildcard(readoutTextBuffer);
    readoutText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));

    add(__background);
    add(background);
    add(nextButton);
    add(gauge1);
    add(icon);
    add(readoutText);
}

void Screen2ViewBase::setupScreen()
{

}

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &nextButton)
    {
        //ChangeScreen
        //When nextButton clicked change screen to Screen3
        //Go to Screen3 with no screen transition
        application().gotoScreen3ScreenNoTransition();
    }
}

void Screen2ViewBase::gaugeValueSetCallbackHandler(const touchgfx::AbstractProgressIndicator& src)
{
    if (&src == &gauge1)
    {
        //NewGaugeValue
        //When gauge1 gauge value set call virtual function
        //Call newGaugeValue
        newGaugeValue();
    }
}
