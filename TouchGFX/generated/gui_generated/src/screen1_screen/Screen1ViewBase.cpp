/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"

Screen1ViewBase::Screen1ViewBase() :
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));

    nextButton.setBitmaps(Bitmap(BITMAP_NEXT_BUTTON_RELEASED_ID), Bitmap(BITMAP_NEXT_BUTTON_PRESSED_ID));
    nextButton.setBitmapXY(0, 0);
    nextButton.setPosition(419, 211, 45, 45);
    nextButton.setAction(flexButtonCallback);

    gauge1.setBackground(touchgfx::Bitmap(BITMAP_GAUGE01_BACKGROUND_ID));
    gauge1.setPosition(102, 22, 276, 228);
    gauge1.setCenter(138, 138);
    gauge1.setStartEndAngle(-130, 130);
    gauge1.setRange(10, 140);
    gauge1.setValue(10);
    gauge1.setNeedle(BITMAP_GAUGE01_NEEDLE_ID, 11, 117);
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    gauge1.setArcVisible();
    gauge1Painter.setBitmap(touchgfx::Bitmap(BITMAP_GAUGE01_DOT_OVERLAY_SMALL_ID));
    gauge1.getArc().setPainter(gauge1Painter);
    gauge1.getArc().setRadius(85);
    gauge1.getArc().setLineWidth(9);
    gauge1.getArc().setCapPrecision(180);
    gauge1.setArcPosition(48, 47, 182, 146);

    add(__background);
    add(background);
    add(nextButton);
    add(gauge1);
}

void Screen1ViewBase::setupScreen()
{

}

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &nextButton)
    {
        //ChangeScreen
        //When nextButton clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
    }
}
